#!/usr/bin/env python3

# gv-notify
#
# Copyright (C) 2022 James D. Lin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
Generates notifications if a Govee thermometer reports a temperature outside of
an expected range.  Expected to be executed periodically (such as via `cron`).
"""
# TODO:
# * Add ability to restrict notifications to specified devices?

import argparse
import dataclasses
import datetime
import functools
import itertools
import os
import re
import shlex
import shutil
import stat
import subprocess
import sys
import typing

import gvutils

# Untested with earlier versions.
if not gvutils.has_python_version(__file__, (3, 8, 0)):
    sys.exit(1)


TemperatureEvent = typing.Tuple[datetime.datetime, gvutils.Temperature]


def is_executable_file(path: str) -> bool:
    """
    Returns `True` if the file specified by `path` is an executable file,
    `False` otherwise.
    """
    try:
        info = os.stat(path)
    except OSError:
        return False
    else:
        mask = stat.S_IFREG | stat.S_IXUSR
        return (info.st_mode & mask) == mask


def parse_duration(s: str) -> datetime.timedelta:
    """
    Parses a duration (a `datetime.timedelta`) from a string.

    Examples:
    ```python
    parse_duration("1d23m45s")
    parse_duration("120m")
    parse_duration("1.5h")
    parse_duration("0.125s")
    ```
    """
    # For simplicity, this RE is not strict and permits some invalid values.
    # Invalid values will be handled later.
    duration_re = re.compile(r"(?:(?P<days>[0-9.]+)d)?"
                             r"(?:(?P<hours>[0-9.]+)h)?"
                             r"(?:(?P<minutes>[0-9.]+)m)?"
                             r"(?:(?P<seconds>[0-9.]+)s)?")
    match = duration_re.fullmatch(s)
    if not match or not s:
        raise ValueError(f"Failed to parse a duration from \"{s}\"")
    try:
        return datetime.timedelta(days=float(match.group("days") or 0),
                                  hours=float(match.group("hours") or 0),
                                  minutes=float(match.group("minutes") or 0),
                                  seconds=float(match.group("seconds") or 0))
    except ValueError as e:
        raise ValueError(f"Failed to parse a duration from \"{s}\"") from e


def next_month(year_month: typing.Tuple[int, int]) -> typing.Tuple[int, int]:
    """
    Returns a `(year, month)` tuple representing the next month after the
    specified `(year, month)` tuple.
    """
    (year, month) = year_month
    month += 1
    return (year + int(month > 12), (month - 1) % 12 + 1)


def temperature_for_range(
    r: gvutils.Range[gvutils.Temperature],
    degrees_c: float,
) -> gvutils.Temperature:
    """
    Converts a temperature in degrees centigrade to a `Temperature` object
    using the same units as the nearer endpoint from the specified `Range`.
    """
    if r.lower is not None and r.upper is not None:
        centigrade_mid = (r.lower.degrees_c + r.upper.degrees_c) / 2
        unit = (r.lower.preferred_unit
                if degrees_c < centigrade_mid
                else r.upper.preferred_unit)
    elif r.lower is not None:
        unit = r.lower.preferred_unit
    else:
        assert r.upper is not None
        unit = r.upper.preferred_unit

    return gvutils.Temperature(degrees_c=degrees_c, preferred_unit=unit)


@dataclasses.dataclass
class EventStats:
    """Stores statistics for a sequence of `Event`s."""
    max_event: gvutils.Event[float]
    min_event: gvutils.Event[float]
    average: float


@dataclasses.dataclass
class StatsReport:
    """
    Stores statistics for the various properties measured from a single device.
    """
    centigrades_stats: typing.List[EventStats]
    humidity_stats: EventStats
    min_battery: gvutils.Event[int]


def generate_report(
    log_paths: typing.List[str],
    *,
    after: datetime.datetime,
) -> typing.Optional["StatsReport"]:
    """
    Generates a `StatsReport` from the specified log files for a single device
    for the time period specified by `after`.

    `log_paths` is expected to be in chronological order already.

    Returns `None` if there are no log events in the specified time period.
    """
    log_lines = list(itertools.chain.from_iterable([
        gvutils.parse_log_lines(log_path, after=after)
        for log_path in log_paths
    ]))
    if not log_lines:
        return None

    num_temperatures = len(log_lines[0].centigrades)

    def make_event_list(
        log_lines: typing.Sequence[gvutils.LogLine],
        getter: typing.Callable[[gvutils.LogLine], float],
    ) -> typing.List[gvutils.Event[float]]:
        return [gvutils.Event(timestamp=line.timestamp, value=getter(line))
                for line in log_lines]

    def get_centigrade(i: int, log_line: gvutils.LogLine) -> float:
        return log_line.centigrades[i]

    def get_humidity(log_line: gvutils.LogLine) -> float:
        return log_line.humidity

    def get_battery(log_line: gvutils.LogLine) -> int:
        return log_line.battery

    def event_value(event: gvutils.Event[float]) -> float:
        return event.value

    def stats_from_event_list(
        event_list: typing.List[gvutils.Event[float]],
    ) -> EventStats:
        return EventStats(
            max_event=max(event_list, key=event_value),
            min_event=min(event_list, key=event_value),
            average=gvutils.average_over_time(event_list),
        )

    centigrades_stats = []
    for i in range(num_temperatures):
        centigrades = make_event_list(log_lines,
                                      functools.partial(get_centigrade, i))
        centigrades_stats.append(stats_from_event_list(centigrades))

    humidity_stats = stats_from_event_list(make_event_list(log_lines,
                                                           get_humidity))

    min_battery_line = min(log_lines, key=get_battery)
    min_battery = gvutils.Event(timestamp=min_battery_line.timestamp,
                                value=min_battery_line.battery)

    # TODO: Measure/estimate amount of time above threshold temperature?
    return StatsReport(centigrades_stats=centigrades_stats,
                       humidity_stats=humidity_stats,
                       min_battery=min_battery)


def format_report(
    report: StatsReport,
    *,
    device: gvutils.DeviceConfig,
    utc: bool,
) -> typing.List[str]:
    """
    Generates printable output, as a sequence of lines, from a `StatsReport`
    for a single device.
    """
    reason_lines: typing.List[str] = []

    for centigrade_stats in report.centigrades_stats:
        # TODO: Get individual temperature range
        temp_range = device.expected_temperatures

        reason_lines += format_subreport(
            label="Temperature",
            expected_range=temp_range,
            stats=centigrade_stats,
            transform=functools.partial(temperature_for_range, temp_range),
            utc=utc,
        )

    reason_lines += format_subreport(
        label="Humidity",
        expected_range=device.expected_humidities,
        stats=report.humidity_stats,
        format_value=lambda rh: f"{rh:.1f}%",
        utc=utc,
    )

    if (device.min_battery is not None
            and report.min_battery.value < device.min_battery):
        timestamp = gvutils.format_timestamp(report.min_battery.timestamp,
                                             utc=utc)
        reason_lines.append(
            f"  Battery level below {device.min_battery}%: "
            f"{report.min_battery.value}% ({timestamp})",
        )

    return reason_lines


def format_subreport(
    *,
    label: str,
    expected_range: gvutils.Range[typing.Any],
    stats: EventStats,
    transform: typing.Optional[typing.Callable[[float], typing.Any]] = None,
    format_value: typing.Callable[[typing.Any], str] = str,
    utc: bool,
) -> typing.List[str]:
    """
    Generates printable output, as a sequence of lines, from the `EventStats`
    for a single property from a single device.

    `transform`, if specified, is used to convert `float` values from
    `EventStats` to the type used by `expected_range`.

    `format_value`, if specified, is used to control how values (after being
    transformed, if necessary) should be formatted as strings.
    """
    reason_lines: typing.List[str] = []

    transform = transform or (lambda x: x)

    min_value = transform(stats.min_event.value)
    max_value = transform(stats.max_event.value)

    is_out_of_range = (
           (    expected_range.lower is not None  # noqa: E126,E128,E131,E201
            and min_value < expected_range.lower)  # noqa: E126,E128,E131,E201
        or (    expected_range.upper is not None  # noqa: E126,E128,E131,E201
            and max_value > expected_range.upper)  # noqa: E126,E128,E131,E201
    )

    if not is_out_of_range:
        return reason_lines

    if (expected_range.lower is not None
            and expected_range.upper is not None):
        range_description = (f"out of range "
                             f"[{format_value(expected_range.lower)}, "
                             f"{format_value(expected_range.upper)}]")
    elif expected_range.upper is not None:
        range_description = f"above {format_value(expected_range.upper)}"
    elif expected_range.lower is not None:
        range_description = f"below {format_value(expected_range.lower)}"
    else:
        assert False

    reason_lines.append(f"  {label} {range_description}:")

    def append_reason(
        label: str,
        value: typing.Any,
        timestamp: datetime.datetime,
    ) -> None:
        formatted_timestamp = gvutils.format_timestamp(timestamp, utc=utc)
        reason_lines.append(f"    {label}: {value} {formatted_timestamp}")

    append_reason("Minimum",
                  f"{format_value(min_value)}",
                  stats.min_event.timestamp)
    append_reason("Maximum",
                  f"{format_value(max_value)}",
                  stats.max_event.timestamp)

    reason_lines.append(
        f"    Average: {format_value(transform(stats.average))}",
    )

    return reason_lines


_epilog = f"""\
%(prog)s relies on `{gvutils.Config.default_config_file_path_raw}` for
configuration.  The configuration file should have a section for each Govee
thermometer named with its Bluetooth address.  Each of those sections may have
a `min_temperature` entry, a `max_temperature` entry, or both to specifies the
expected  temperature limits.  Temperatures may be expressed in either
Celsius (e.g. `4.4C`) or Fahrenheit (e.g. `40F`).  If any thermometer reports
a temperature outside of its limits within the time interval specified by
`--past` (15 minutes by default), %(prog)s will execute the notification
command and supply a notification message as its input (via stdin).

The notification command is specified by the `command` entry in the `[notify]`
section of the configuration file.  If not specified, or if called with the
`--dry-run` option, %(prog)s instead will print the notification message to
stdout and exit.

Example configuration:
```
[notify]
command=/usr/bin/mailx -s "Govee thermometer warning" james@example.com

[A4:C1:38:01:23:45]
name=Kitchen Refrigerator
max_temperature=5C
```
"""


@gvutils.entrypoint
def main(argv: typing.List[str]) -> int:
    ap = argparse.ArgumentParser(
        description=__doc__.strip(),
        epilog=_epilog,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        add_help=False,
    )
    ap.add_argument("-h", "--help", action="help",
                    help="Show this help message and exit.")
    ap.add_argument("--config", metavar="CONFIG_FILE", dest="config_file_path",
                    help=f"The path to the configuration file.  If "
                         f"not specified, defaults to "
                         f"`{gvutils.Config.default_config_file_path_raw}`.")
    ap.add_argument("--debug", action="store_true", help=argparse.SUPPRESS)
    ap.add_argument("--dry-run", action="store_true",
                    help="Print the notification to `stdout` instead of "
                         "executing the notify command.")
    ap.add_argument("--past", metavar="DURATION",
                    help="Examine only log events from the past DURATION.  "
                         "DURATION may be of the form 1h23m45s, 120m, 1.5h, "
                         "etc.  If not specified, defaults to the past 15 "
                         "minutes.")
    ap.add_argument("--log-directory",
                    help="Path to the directory containing "
                         "GoveeBTTempLogger's log files.")
    ap.add_argument("--utc", action="store_true",
                    help="Show times as UTC times instead of in the local "
                         "time.")
    args = ap.parse_args(argv[1:])

    config = gvutils.Config(args.config_file_path)
    device: typing.Optional[gvutils.DeviceConfig]

    if args.debug:
        for device in config.devices.values():
            print(f"{device}:\n"
                  f"  Expected temperatures: {device.expected_temperatures}\n"
                  f"  Expected humidities: {device.expected_humidities}\n"
                  f"  Minimum battery: {device.min_battery}\n")

    log_directory = args.log_directory or config.log_directory or os.getcwd()
    if not os.path.isdir(log_directory):
        raise gvutils.AbortError(f"\"{log_directory}\" is not a directory.")

    command: typing.List[str] = []
    if config.notify_command:
        command = [os.path.expanduser(token)
                   for token in shlex.split(config.notify_command)]

        if not os.path.isabs(command[0]):
            command[0] = (os.path.abspath(command[0])
                          if is_executable_file(command[0])
                          else (shutil.which(command[0]) or command[0]))
        elif not is_executable_file(command[0]):
            raise gvutils.AbortError(f"\"{command[0]}\" is not an executable "
                                     f"file.")

    log_table = gvutils.generate_log_lookup_table(log_directory)
    if not log_table:
        raise gvutils.AbortError(f"No log files found in {log_directory}")

    now = datetime.datetime.now(tz=datetime.timezone.utc)
    if not args.utc:
        now = now.astimezone()

    delta = (parse_duration(args.past)
             if args.past
             else datetime.timedelta(minutes=15))
    start = now - delta

    recent_logs: typing.Dict[str, typing.List[str]] = {}
    year_month = (start.year, start.month)
    while True:
        for (address, log_file) in log_table.get(year_month, {}).items():
            recent_logs.setdefault(address, []).append(os.path.join(log_directory, log_file))
        if year_month == (now.year, now.month):
            break
        year_month = next_month(year_month)

    message_lines: typing.List[str] = []
    for (address, log_list) in recent_logs.items():
        device = config.devices.get(address)
        if not device:
            device = gvutils.DeviceConfig(address=address)
            device.expected_temperatures = config.default_expected_temperatures
            device.expected_humidities = config.default_expected_humidities
            device.min_battery = config.default_min_battery

        if (not device.expected_temperatures.has_bound()
                and not device.expected_humidities.has_bound()
                and device.min_battery is not None):
            continue

        report = generate_report(log_list, after=start)
        if not report:
            continue

        reason_lines = format_report(report, device=device, utc=args.utc)
        if reason_lines:
            message_lines.append(f"{device}:")
            message_lines += reason_lines

    if not message_lines:
        return 0

    message = "\n".join(itertools.chain((f"{start} to {now}:", ""),
                                        message_lines))
    if args.dry_run or not command:
        print(message)
        return 0

    result = subprocess.run(command, input=message, text=True, check=False)
    return result.returncode


if __name__ == "__main__":
    __name__ = os.path.basename(__file__)  # pylint: disable=redefined-builtin
    sys.exit(main(sys.argv))
